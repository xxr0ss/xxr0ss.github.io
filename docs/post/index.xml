<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on XX の Blog</title>
    <link>https://xxr0ss.github.io/post/</link>
    <description>Recent content in Posts on XX の Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 29 Nov 2021 02:00:00 +0800</lastBuildDate><atom:link href="https://xxr0ss.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>CPython内存模型</title>
      <link>https://xxr0ss.github.io/post/cpython_memory_model/</link>
      <pubDate>Mon, 29 Nov 2021 02:00:00 +0800</pubDate>
      
      <guid>https://xxr0ss.github.io/post/cpython_memory_model/</guid>
      <description>Python内存模型 本文源码基于CPython 3.10
Python实现了自己的内存管理，用以加快内存操作和减少内存碎片化。Python定义了一个阈值，小于等于这个阈值的小内存请求，由Python实现的这套内存管理来分配，大于则直接交给malloc()。
// Objects/obmalloc.c #define SMALL_REQUEST_THRESHOLD 512 内存管理模型 Python的内存分配器分成如下层级
Object-specific allocators _____ ______ ______ ________ [ int ] [ dict ] [ list ] ... [ string ] Python core | +3 | &amp;lt;----- Object-specific memory -----&amp;gt; | &amp;lt;-- Non-object memory --&amp;gt; | _______________________________ | | [ Python&amp;#39;s object allocator ] | | +2 | ####### Object memory ####### | &amp;lt;------ Internal buffers ------&amp;gt; | ______________________________________________________________ | [ Python&amp;#39;s raw memory allocator (PyMem_ API) ] | +1 | &amp;lt;----- Python memory (under PyMem manager&amp;#39;s control) ------&amp;gt; | | __________________________________________________________________ [ Underlying general-purpose allocator (ex: C library malloc) ] 0 | &amp;lt;------ Virtual memory allocated for the python process -------&amp;gt; | ========================================================================= _______________________________________________________________________ [ OS-specific Virtual Memory Manager (VMM) ] -1 | &amp;lt;--- Kernel dynamic storage allocation &amp;amp; management (page-based) ---&amp;gt; | __________________________________ __________________________________ [ ] [ ] -2 | &amp;lt;-- Physical memory: ROM/RAM --&amp;gt; | | &amp;lt;-- Secondary storage (swap) --&amp;gt; | 按Python内存模型，一个典型的调用过程如下：</description>
    </item>
    
    <item>
      <title>Python逆向初体验</title>
      <link>https://xxr0ss.github.io/post/reverse_python/</link>
      <pubDate>Sun, 22 Aug 2021 08:57:42 +0800</pubDate>
      
      <guid>https://xxr0ss.github.io/post/reverse_python/</guid>
      <description>Cython篇  Python逆向主要难度还是在pyd（或者说so）上，以下为Cython生成的可供python导入的模块的逆向手段。
Cython也能产生exe，使用—embed命令行参数，然后正常添加好include目录和libs目录和依赖就可以直接编译了。
开发的角度 项目创建和构建 在Windows上，直接通过setup.py的处理方法，编译出来的pyd没有符号文件产生，而且似乎也没有办法通过设置命令行，设置某些参数之类的方式来生成符号文件。我目前探索比较方便的方案是：
创建VS的动态链接库工程，项目属性里做如下工作：
 （可选）可以在pre event里调用cython生成.c   需要在项目依赖的include目录和lib目录，用到的lib依赖，三个地方都加上python的部分   指定生成和本机python环境一样的pyd，比如都是x64的 修改生成目标的dll后缀设置为pyd  然后项目文件的管理：
 不要把.py放项目的Source Files（源文件）filter下，不然会被当成项目源码干扰编译过程，可以创建一个单独的filter来放.py文件，比如我现在的管理方式：  逆向的角度  尽可能恢复符号，借用别的有符号的pyd，用bindiff进行恢复 导出一部分结构体  __Pyx_AddTraceback对逆向有较大辅助作用
 确认下还有哪些符号有利于逆向分析  代码逆向定位 都在slots里，所以是挨着的，确定了一个就能确定另一个。函数实现也是挨着的。
 __pyx_pymod_create __pyx_pymod_exec_modulename  static PyModuleDef_Slot __pyx_moduledef_slots[] = {  {Py_mod_create, (void*)},  {Py_mod_exec, (void*)__pyx_pymod_exec_demo},  {0, NULL} };   // 在python的moduleobject.h里有定义 typedef struct PyModuleDef_Slot{  int slot;  void *value; } PyModuleDef_Slot; pyx和py的区别 其实就算不使用cython的语法特性，同样的代码放在py和pyx里，cython编译出来的结果并不相同。</description>
    </item>
    
    <item>
      <title>手把手Qiling Framework上手教程</title>
      <link>https://xxr0ss.github.io/post/hands_on_qiling_framework/</link>
      <pubDate>Thu, 19 Aug 2021 02:03:42 +0800</pubDate>
      
      <guid>https://xxr0ss.github.io/post/hands_on_qiling_framework/</guid>
      <description>简介 QilingLab来源： Shielder - QilingLab – Release，是一个包含十几个小挑战的程序，用于快速上手Qiling框架的主要功能。Qiling框架就不多做介绍了。
两个不同架构但是内容一样，任选其一做即可。aarch64版本已有Joan Sivion做的Qiling Labs - JoanSivion Security Blog，我这里用x86-64做一遍，当作对Joan Sivion的补充和中文翻译。
题目样本 qilinglab-x86_64
qilinglab-aarch64
开始挑战！ qilinglab出发点只是训练qiling框架的使用，所以没有啥逆向强度，符号也没有去，我们直接用IDA打开看即可。
看下题目 运行看到题目列表：
Challenge 1: Store 1337 at pointer 0x1337. Challenge 2: Make the &amp;#39;uname&amp;#39; syscall return the correct values. Challenge 3: Make &amp;#39;/dev/urandom&amp;#39; and &amp;#39;getrandom&amp;#39; &amp;#34;collide&amp;#34;. Challenge 4: Enter inside the &amp;#34;forbidden&amp;#34; loop. Challenge 5: Guess every call to rand(). Challenge 6: Avoid the infinite loop. Challenge 7: Don&amp;#39;t waste time waiting for &amp;#39;sleep&amp;#39;.</description>
    </item>
    
  </channel>
</rss>
